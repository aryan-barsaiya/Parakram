<%- include('../partials/headers.ejs'); -%>
<link rel="stylesheet" href="styles/home-carousel.css">

<style>
    * { box-sizing: border-box; }
.video-background {
background: #000;
position: fixed;
top: 0; right: 0; bottom: 0; left: 0;
z-index: -99;
}
.video-foreground,
.video-background iframe {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
pointer-events: none;
}
#vidtop-content {
top: 0;
color: #fff;
}
.vid-info { position: absolute; top: 0; right: 0; width: 33%; background: rgba(0,0,0,0.3); color: #fff; padding: 1rem; font-family: Avenir, Helvetica, sans-serif; }
.vid-info h1 { font-size: 2rem; font-weight: 700; margin-top: 0; line-height: 1.2; }
.vid-info a { display: block; color: #fff; text-decoration: none; background: rgba(0,0,0,0.5); transition: .6s background; border-bottom: none; margin: 1rem auto; text-align: center; }
@media (min-aspect-ratio: 16/9) {
.video-foreground { height: 300%; top: -100%; }
}
@media (max-aspect-ratio: 16/9) {
.video-foreground { width: 300%; left: -100%; }
}
@media all and (max-width: 600px) {
.vid-info { width: 50%; padding: .5rem; }
.vid-info h1 { margin-bottom: .2rem; }
}
@media all and (max-width: 500px) {
.vid-info .acronym { display: none; }
}
</style>


<svg class="hidden">
  <symbol id="icon-arrow" viewBox="0 0 24 24">
    <title>arrow</title>
    <polygon points="6.3,12.8 20.9,12.8 20.9,11.2 6.3,11.2 10.2,7.2 9,6 3.1,12 9,18 10.2,16.8 " />
  </symbol>
  <symbol id="icon-drop" viewBox="0 0 24 24">
    <title>drop</title>
    <path d="M12,21c-3.6,0-6.6-3-6.6-6.6C5.4,11,10.8,4,11.4,3.2C11.6,3.1,11.8,3,12,3s0.4,0.1,0.6,0.3c0.6,0.8,6.1,7.8,6.1,11.2C18.6,18.1,15.6,21,12,21zM12,4.8c-1.8,2.4-5.2,7.4-5.2,9.6c0,2.9,2.3,5.2,5.2,5.2s5.2-2.3,5.2-5.2C17.2,12.2,13.8,7.3,12,4.8z" />
    <path d="M12,18.2c-0.4,0-0.7-0.3-0.7-0.7s0.3-0.7,0.7-0.7c1.3,0,2.4-1.1,2.4-2.4c0-0.4,0.3-0.7,0.7-0.7c0.4,0,0.7,0.3,0.7,0.7C15.8,16.5,14.1,18.2,12,18.2z" />
  </symbol>
  <symbol id="icon-longarrow" viewBox="0 0 54 24">
    <title>longarrow</title>
    <path d="M.42 11.158L12.38.256c.333-.27.696-.322 1.09-.155.395.166.593.467.593.903v6.977h38.87c.29 0 .53.093.716.28.187.187.28.426.28.716v5.98c0 .29-.093.53-.28.716a.971.971 0 0 1-.716.28h-38.87v6.977c0 .416-.199.717-.592.903-.395.167-.759.104-1.09-.186L.42 12.62a1.018 1.018 0 0 1 0-1.462z" />
  </symbol>
  <symbol id="icon-navarrow" viewBox="0 0 408 408">
    <title>navarrow</title>
    <polygon fill="#fff" fill-rule="nonzero" points="204 0 168.3 35.7 311.1 178.5 0 178.5 0 229.5 311.1 229.5 168.3 372.3 204 408 408 204"></polygon>
  </symbol>
</svg>
<main>
  
    </header>
  </div>



  <div class="video-background">
    <div class="video-foreground">
      <video autoplay muted loop >
						<source src="Images/fire.mp4" type="video/mp4">
					</video>
  </div>
  </div>

<br>
  <div class="slideshow">
    <div class="slideshow__deco"></div>
    <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri1.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title">Cricket</h3>
        <h4 class="slide__subtitle">You don't play for the crowd, you play for the country.</h4>
      </div>
    </div>
    <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri2.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title"></h3>
        <h4 class="slide__subtitle"></h4>
      </div>
    </div>
    <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri3.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title"></h3>
        <h4 class="slide__subtitle"></h4>
      </div>
    </div>
    <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri4.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title"></h3>
        <h4 class="slide__subtitle"></h4>
      </div>
    </div>
    <!-- <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri5.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title"></h3>
        <h4 class="slide__subtitle"></h4>
      </div>
    </div>
    <div class="slide">
      <div class="slide__img-wrap">
        <div class="slide__img" style="background-image: url(/Images/cricket/cri6.jpg);"></div>
      </div>
      <div class="slide__side"></div>
      <div class="slide__title-wrap">
        <span class="slide__number"></span>
        <h3 class="slide__title"></h3>
        <h4 class="slide__subtitle"></h4>
      </div>
    </div> -->
    <button class="nav nav--prev">
      <svg class="icon icon--navarrow-prev">
        <use xlink:href="#icon-navarrow"></use>
      </svg>
    </button>
    <button class="nav nav--next">
      <svg class="icon icon--navarrow-next">
        <use xlink:href="#icon-navarrow"></use>
      </svg>
    </button>
  </div>

  <div class="document-center">
  <div class="carousel-container">
    <div class="carousel" id="carousel-1" auto-scroll="7000">
      <!--The uppermost screen will appear first. This is due to JavaScript-->
      <section class="carousel-screen">
          <img src="/Images/cricket/cric-ls1.jpg" alt="Chicago Band" />
        
      </section>
      <section class="carousel-screen">
          <img src="/Images/cricket/cric-ls2.jpg" alt="New York" />
        
      </section>
      <section class="carousel-screen">
          <img src="/Images/cricket/cric-ls3.jpg" alt="Los Angeles" />
      </section>
      <section class="carousel-screen">
              <img src="/Images/cricket/cric-ls4.jpg" alt="Chicago Band" />
        </section>
        <section class="carousel-screen">
              <img src="/Images/cricket/cric-ls5.jpg" alt="New York" />
        </section>
        <section class="text-container">
          <p>Cricket</p>
          <p>You don't play for the crowd, you play for the country.</p>
        </section>
      <!--These are not screens. They will always be on carousel-->
      <section class="circle-container">
        <!--These 'circles' need to match the number of carousel screens-->
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
      </section>
      <div class="left-arrow">
        <span class="chevron left"></span>
      </div>
      <div class="right-arrow">
        <span class="chevron right"></span>
      </div>
    </div>
  </div>
  
</div>


</main>
<script>
  //js for carousel
  //Right Arrow & Left Arrow
let rightArrow = document.querySelector("#carousel-1 .right-arrow");
let leftArrow = document.querySelector("#carousel-1 .left-arrow");
//List of all of the screens in carousel
let screenStore = document.querySelectorAll("#carousel-1 .carousel-screen");
let numOfScreens = screenStore.length;
//List of all the circle stores
let circleStore = document.querySelectorAll("#carousel-1 .circle-container .circle");
//number to target main screen
let currentScreen = 0;
//currently in animation or not
let inAnim = false;
//Animation Time
let animTime = 500;

//Sort out starting position
sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
//Sort out circle styling
highlightCircle(circleStore[0]);

//Start animation. Either towards left or right
function startAnim(direction) {
  if(!inAnim) {
      inAnim = true;
      if(direction === "right") {
          moveRight();
          highlightCircle(circleStore[currentScreen + 1], "right");
      }else if(direction === "left"){
          moveLeft();
          highlightCircle(circleStore[currentScreen - 1], "left");
      }else{
          isAnim = false;
          return
      }
  }
}

//Move to the right
function moveRight() {
  //Move towards Next screen as usual
  if(currentScreen < numOfScreens - 1){
  toLeft(screenStore[currentScreen]);
  comeRight(screenStore[currentScreen + 1]);
  setTimeout(() => {
      inAnim = false;
      currentScreen++;
      sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
  }, animTime)
  }else{
      //Or the screen coming in is the first screen again
      toLeft(screenStore[currentScreen]);
      comeRight(screenStore[0]);
      setTimeout(() => {
          inAnim = false;
          currentScreen = 0;
          sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
      }, animTime)
  }
}

//Move to the left
function moveLeft() {
  //Move back to screen previously on, as usual
  if(currentScreen > 0){
      toRight(screenStore[currentScreen]);
      comeLeft(screenStore[currentScreen - 1]);
      setTimeout(() => {
      inAnim = false;
      currentScreen--;
      sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
      }, animTime)
  }else{
      //Move back to the last screen container
      toRight(screenStore[currentScreen]);
      comeLeft(screenStore[numOfScreens - 1]);
      setTimeout(() => {
          inAnim = false;
          currentScreen = numOfScreens - 1;
          sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
          }, animTime)
  }
}

//User clicks on rightArrow
rightArrow.addEventListener("click", () => {
  startAnim("right");
});

//User clicks on the leftArrow
leftArrow.addEventListener("click", () => {
  startAnim("left");
});




//User clicks on one of the circles
circleStore.forEach(circle => {
  circle.addEventListener("click", event => {
      if(!inAnim){
      //Convert NodeList to Array, to use 'indexOf' method.
      let circleStoreArray = Array.prototype.slice.call(circleStore);
      let circleIndex = circleStoreArray.indexOf(event.target);
      //Configure circle styling
      highlightCircle(event.target);
      //Work out whether we need to move right or left, or nowhere.
      if(circleIndex > currentScreen){
          changeScreenCircleClick(circleIndex, "right");
      }else if (circleIndex < currentScreen){
          changeScreenCircleClick(circleIndex, "left");
      }
  }
})
})

function changeScreenCircleClick(circleIndex, direction) {
  inAnim = true;
  if(direction === "right"){
      sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[circleIndex]);
      toLeft(screenStore[currentScreen]);
      comeRight(screenStore[circleIndex]);
  }else if (direction === "left"){
      sortPositioning(screenStore[currentScreen], screenStore[circleIndex], screenStore[currentScreen + 1]);
      toRight(screenStore[currentScreen]);
      comeLeft(screenStore[circleIndex]);
  }else{
      inAnim = false;
      return
  }
  setTimeout(() => {
  inAnim = false;
  currentScreen = circleIndex;
  sortPositioning(screenStore[currentScreen], screenStore[currentScreen - 1], screenStore[currentScreen + 1]);
  }, animTime)
}

function highlightCircle(circleSelect, direction) {
  if(circleSelect === undefined && direction === "right"){
      circleSelect = circleStore[0];
  }else if (circleSelect === undefined && direction === "left"){
      circleSelect = circleStore[numOfScreens - 1];
  }
  circleStore.forEach(circle => {
      if(circle === circleSelect){
          circle.classList.add("circle-fill");
      }else{
          circle.classList.remove("circle-fill");
      }
  })
}


//Animation methods
function toLeft(screen) {
  screen.style.animation = "toLeft 0.5s ease-in-out forwards";
  setTimeout(() => {
      screen.style.animation = "";
  }, animTime);
}

function toRight(screen) {
  screen.style.animation = "toRight 0.5s ease-in-out forwards";
  setTimeout(() => {
      screen.style.animation = "";
  }, animTime);
}

function comeRight(screen) {
  screen.style.animation = "comeRight 0.5s ease-in-out forwards";
  setTimeout(() => {
      screen.style.animation = "";
  }, animTime);
}

function comeLeft(screen) {
  screen.style.animation = "comeLeft 0.5s ease-in-out forwards";
  setTimeout(() => {
      screen.style.animation = "";
  }, animTime);
}



//Sort positioning. Don't want images to overlap
function sortPositioning(mainScreen, leftScreen, rightScreen) {
  //If right screen is undefined. We need to repeat first screen again
  if(rightScreen === undefined){
      rightScreen = screenStore[0];
  }
  //If left screen is undefined. We use the last screen
  if(leftScreen === undefined){
      leftScreen = screenStore[numOfScreens - 1];
  }
  screenStore.forEach(screen => {
      if(screen === mainScreen){
          screen.style.display = "block";
          screen.style.left = "0px";
      }else if (screen === leftScreen){
          screen.style.display = "block";
          screen.style.left = "-100%";
      }else if (screen === rightScreen){
          screen.style.display = "block";
          screen.style.left = "100%";
      }else{
          screen.style.display = "none";
      }
  })
}

//Auto Scroll feature
let carousel = document.getElementById("carousel-1");
let scrollTime = Number(carousel.getAttribute("auto-scroll"));
//Only implement the feature if the user has included the attribute 'auto-scroll'.
if(scrollTime) {
  //Auto Scroll will be set up the very first time
  let autoWipe = setInterval(() => {
      startAnim("right");
  }, /*scrollTime*/3500);
  //Clear the timer when they hover on carousel
  carousel.addEventListener("mouseenter", () => {
      clearInterval(autoWipe);
  });
  //Re-initialise the timer when they hover out of the carousel
  carousel.addEventListener("mouseleave", () => {
       autoWipe = setInterval(() => {
          startAnim("right");
      }, /*scrollTime*/3500);
  })

}
  </script>   


    


    
<script src="/js/imagesloaded.pkgd.min.js"></script>
<script src="/js/charming.min.js"></script>
<script src="/js/TweenMax.min.js"></script>
<script src="/js/demo.js"></script>
  <%-include('../partials/footers')-%>
